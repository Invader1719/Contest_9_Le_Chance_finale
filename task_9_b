#include <algorithm>
#include <iostream>
#include <vector>

int Leader(std::vector<int>& par, int vertex) {
  if (par[vertex] == vertex) {
    return vertex;
  }
  par[vertex] = Leader(par, par[vertex]);
  return par[vertex];
}

bool InOneSet(std::vector<int>& par, int a, int b) {
  return Leader(par, a) == Leader(par, b);
}

void Unite(std::vector<int>& par, std::vector<int>& weight, int a, int b) {
  int para = Leader(par, a);
  int parb = Leader(par, b);

  if (weight[para] > weight[par[b]]) {
    std::swap(para, parb);
  }
  weight[parb] += weight[para];
  par[para] = parb;
}

struct Triplet {
  int w;
  int a;
  int b;

  Triplet(int ww, int aa, int bb) : w(ww), a(aa), b(bb) {}
};

bool Cmp(const Triplet& a, const Triplet& b) { return a.w < b.w; }

int main() {
  int n;
  int k;
  std::cin >> n >> k;
  std::vector<int> par(n);
  std::vector<int> weight(n, 1);
  for (int i = 0; i < n; i++) {
    par[i] = i;
  }

  std::vector<Triplet> edges;
  for (int i = 0; i < k; i++) {
    int a;
    int b;
    int w;
    std::cin >> a >> b >> w;
    a -= 1;
    b -= 1;
    Triplet tmp(w, a, b);
    edges.push_back(tmp);
  }

  sort(edges.begin(), edges.end(), Cmp);

  int ans = 0;
  for (auto e : edges) {
    if (!InOneSet(par, e.a, e.b)) {
      Unite(par, weight, e.a, e.b);
      ans += e.w;
    }
  }
  std::cout << ans;
}
