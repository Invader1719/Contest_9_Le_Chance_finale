#include <iostream>
#include <vector>

void Dfs(std::vector<std::vector<int>>& graph, std::vector<bool>& used,
         int vertex) {
  used[vertex] = true;
  for (int u : graph[vertex]) {
    if (!used[u]) {
      Dfs(graph, used, u);
    }
  }
}

int main() {
  int l;
  int r;
  std::cin >> l >> r;
  std::vector<std::vector<int>> edges(l);
  for (int i = 0; i < l; i++) {
    int maxt;
    std::cin >> maxt;
    for (int j = 0; j < maxt; j++) {
      int a;
      std::cin >> a;
      a -= 1;
      edges[i].push_back(a);
    }
  }

  std::vector<int> mt(l);
  for (int i = 0; i < l; i++) {
    int a;
    std::cin >> a;
    a -= 1;
    mt[i] = a;
  }
  std::vector<std::vector<int>> graph(l + r);
  std::vector<int> start;
  for (int i = 0; i < l; i++) {
    for (int g : edges[i]) {
      if (mt[i] == -1) {
        graph[i].push_back(l + g);
      } else if (mt[i] == g) {
        graph[mt[i] + l].push_back(i);
      } else {
        graph[i].push_back(g + l);
      }
    }
  }

  std::vector<bool> used(r + l, false);
  for (int i = 0; i < l; i++) {
    if (mt[i] == -1) {
      Dfs(graph, used, i);
    }
  }

  std::vector<int> ans1;
  std::vector<int> ans2;

  int cnt1 = 0;
  int cnt2 = 0;

  for (int i = 0; i < l; i++) {
    if (!used[i]) {
      cnt1++;
      ans1.push_back(i + 1);
    }
  }

  for (int i = l; i < l + r; i++) {
    if (used[i]) {
      cnt2 += 1;
      ans2.push_back(i + 1 - l);
    }
  }
  std::cout << cnt1 + cnt2 << '\n';
  std::cout << cnt1 << ' ';
  for (auto p : ans1) {
    std::cout << p << ' ';
  }
  std::cout << '\n';
  std::cout << cnt2 << ' ';
  for (auto p : ans2) {
    std::cout << p << ' ';
  }

  return 0;
}
